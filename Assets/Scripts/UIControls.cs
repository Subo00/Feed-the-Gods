//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Toolkit/UI/UIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIControls"",
    ""maps"": [
        {
            ""name"": ""ToggleUI"",
            ""id"": ""19065817-ae61-4660-9ad6-dee079e13486"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""314d2f28-df9e-4354-b989-a93343655b9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crafting"",
                    ""type"": ""Button"",
                    ""id"": ""eaaa614b-512d-48d8-9012-9269b2ceabd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainMenu "",
                    ""type"": ""Button"",
                    ""id"": ""a227a046-a833-4d8d-a275-2e3cf10dba62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07ce561e-099d-47fd-9aad-42d541877b16"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb30f1df-cf28-4380-a7bf-147601d2c792"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crafting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7633e105-0a1d-48c2-abe2-66109c4f475e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ToggleUI
        m_ToggleUI = asset.FindActionMap("ToggleUI", throwIfNotFound: true);
        m_ToggleUI_Inventory = m_ToggleUI.FindAction("Inventory", throwIfNotFound: true);
        m_ToggleUI_Crafting = m_ToggleUI.FindAction("Crafting", throwIfNotFound: true);
        m_ToggleUI_MainMenu = m_ToggleUI.FindAction("MainMenu ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ToggleUI
    private readonly InputActionMap m_ToggleUI;
    private List<IToggleUIActions> m_ToggleUIActionsCallbackInterfaces = new List<IToggleUIActions>();
    private readonly InputAction m_ToggleUI_Inventory;
    private readonly InputAction m_ToggleUI_Crafting;
    private readonly InputAction m_ToggleUI_MainMenu;
    public struct ToggleUIActions
    {
        private @UIControls m_Wrapper;
        public ToggleUIActions(@UIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_ToggleUI_Inventory;
        public InputAction @Crafting => m_Wrapper.m_ToggleUI_Crafting;
        public InputAction @MainMenu => m_Wrapper.m_ToggleUI_MainMenu;
        public InputActionMap Get() { return m_Wrapper.m_ToggleUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleUIActions set) { return set.Get(); }
        public void AddCallbacks(IToggleUIActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleUIActionsCallbackInterfaces.Add(instance);
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Crafting.started += instance.OnCrafting;
            @Crafting.performed += instance.OnCrafting;
            @Crafting.canceled += instance.OnCrafting;
            @MainMenu.started += instance.OnMainMenu;
            @MainMenu.performed += instance.OnMainMenu;
            @MainMenu.canceled += instance.OnMainMenu;
        }

        private void UnregisterCallbacks(IToggleUIActions instance)
        {
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Crafting.started -= instance.OnCrafting;
            @Crafting.performed -= instance.OnCrafting;
            @Crafting.canceled -= instance.OnCrafting;
            @MainMenu.started -= instance.OnMainMenu;
            @MainMenu.performed -= instance.OnMainMenu;
            @MainMenu.canceled -= instance.OnMainMenu;
        }

        public void RemoveCallbacks(IToggleUIActions instance)
        {
            if (m_Wrapper.m_ToggleUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleUIActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleUIActions @ToggleUI => new ToggleUIActions(this);
    public interface IToggleUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnCrafting(InputAction.CallbackContext context);
        void OnMainMenu(InputAction.CallbackContext context);
    }
}
